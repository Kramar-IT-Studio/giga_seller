"""Tests for telegram bot handlers."""
import pytest
from unittest.mock import Mock, AsyncMock
from telegram import Update, Message
from telegram.ext import ContextTypes
from src.bot.message_handler import MessageHandler

@pytest.fixture
def mock_update() -> Mock:
    """Create mock update object."""
    update = Mock(spec=Update)
    message = Mock(spec=Message)
    message.reply_text = AsyncMock()
    update.message = message
    return update

@pytest.fixture
def mock_context() -> Mock:
    """Create mock context object."""
    context = Mock(spec=ContextTypes.DEFAULT_TYPE)
    return context

@pytest.mark.asyncio
async def test_start_command(mock_update, mock_context, mock_chat_service):
    """Test start command handler."""
    handler = MessageHandler(mock_chat_service)
    await handler.start(mock_update, mock_context)
    
    mock_update.message.reply_text.assert_called_once()
    call_args = mock_update.message.reply_text.call_args[0][0]
    assert "üëã –ü—Ä–∏–≤–µ—Ç!" in call_args

@pytest.mark.asyncio
async def test_message_handling(mock_update, mock_context, mock_chat_service):
    """Test message handling."""
    mock_update.message.text = "Test message"
    handler = MessageHandler(mock_chat_service)
    
    await handler.handle_message(mock_update, mock_context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç "–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º..."
    assert mock_update.message.reply_text.call_args_list[0][0][0] == "ü§î –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —á–∞—Ç–∞ –±—ã–ª –≤—ã–∑–≤–∞–Ω
    mock_chat_service.generate_response.assert_called_once_with("Test message")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    assert len(mock_update.message.reply_text.call_args_list) == 2

@pytest.mark.asyncio
async def test_message_handling_error(mock_update, mock_context, mock_chat_service):
    """Test error handling in message handler."""
    mock_update.message.text = "Test message"
    mock_chat_service.generate_response.side_effect = Exception("Test error")
    
    handler = MessageHandler(mock_chat_service)
    await handler.handle_message(mock_update, mock_context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    assert "üò¢ –û—à–∏–±–∫–∞: Test error" in mock_update.message.reply_text.call_args_list[-1][0][0]