"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞."""
import logging
import sys
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes
from src.services.chat_service import ChatService
from src.services.state_service import StateService
from src.models.dialog_state import DialogState, DialogStep
from src.utils.phone_validator import validate_russian_phone
from src.constants.phone_data import (
    get_brand_by_keyword,
    get_model_keywords,
    is_spec_related,
    PHONE_SPECS
)
from src.services.order_service import OrderService

class MessageHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π."""

    def __init__(self, chat_service: ChatService) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞."""
        self._chat_service = chat_service
        self._state_service = StateService()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
        if not update.message or not update.effective_user:
            return

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        self._state_service.reset_state(update.effective_user.id)
        
        await update.message.reply_text(
            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø—Ä–æ–∞–∂–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤. "
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
        )

    def _build_prompt(self, state: DialogState, message: str) -> str:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è GigaChat –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞."""
        system_prompt = """–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤. 
        –°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π —ç—Ç–∏–º –ø—Ä–∞–≤–∏–ª–∞–º –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏:
        
        1. –°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
        - –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ" –≤ –æ—Ç–≤–µ—Ç–∞—Ö
        - –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∫–∞–∑–∞–ª –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —É—Ç–æ—á–Ω–µ–Ω–∏—é –¥–µ—Ç–∞–ª–µ–π
        - –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ø—Ä–æ—Å–∏ –æ –∂–µ–ª–∞–µ–º—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö
        - –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!", "–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä!"
        
        2. –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ –î–ò–ê–õ–û–ì–ê:
        - –ü—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ö–∞–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç (–ø–∞–º—è—Ç—å, —Ü–≤–µ—Ç)?"
        - –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç "–Ω–µ—Ç" –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö: "–•–æ—Ä–æ—à–æ! –¢–æ–≥–¥–∞ –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–π–¥–µ–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é. –ö–∞–∫ –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
        - –ü—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–µ: "–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å - –∫–∞–∫ –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
        - –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏: "–°–ø–∞—Å–∏–±–æ, {–∏–º—è}! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        - –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "–°–ø–∞—Å–∏–±–æ, {–∏–º—è}. –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
        
        3. –í–ê–ñ–ù–û:
        - –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –æ—Ç–≤–µ—Ç–∞—Ö
        - –°—Ä–∞–∑—É —Ä–µ–∞–≥–∏—Ä—É–π –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        - –ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ "–Ω–µ—Ç" –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö, –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –∑–∞–ø—Ä–æ—Å—É –∏–º–µ–Ω–∏
        - –°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –º–æ–¥–µ–ª—å -> (—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏) -> –∏–º—è -> —Ç–µ–ª–µ—Ñ–æ–Ω
        """

        context = f"\n–¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø –¥–∏–∞–ª–æ–≥–∞: {state.current_step.name}\n"
        if state.order_data.phone_model:
            context += f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: {state.order_data.phone_model}\n"
        if state.order_data.specifications:
            context += f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {state.order_data.specifications}\n"
        if state.order_data.client_name:
            context += f"–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {state.order_data.client_name}\n"
        if state.order_data.client_phone:
            context += f"–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {state.order_data.client_phone}\n"
        
        context += f"\n–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message}"
        
        return system_prompt + context

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        if not update.message or not update.effective_user or not update.message.text:
            return

        user_id = update.effective_user.id
        message_text = update.message.text
        
        try:
            state = self._state_service.get_state(user_id)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            if hasattr(state, 'last_error') and state.last_error:
                error_message = state.last_error
                state.last_error = None
                
                if error_message == "name_validation_error":
                    await update.message.reply_text(
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω, –ú–∞—Ä–∏—è).\n"
                        "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã."
                    )
                    return
                elif state.current_step == DialogStep.GET_PHONE:
                    await update.message.reply_text(
                        f"‚ùå {error_message}\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                        "‚Ä¢ +79XXXXXXXXX\n"
                        "‚Ä¢ 89XXXXXXXXX\n"
                        "‚Ä¢ 9XXXXXXXXX"
                    )
                    return

            prompt = self._build_prompt(state, message_text)
            response = await self._chat_service.generate_response(prompt)
            
            old_step = state.current_step
            self._update_state(state, message_text, response)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            if old_step == state.current_step and state.current_step == DialogStep.GET_PHONE:
                # –ï—Å–ª–∏ —à–∞–≥ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∑–Ω–∞—á–∏—Ç –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                    "‚Ä¢ +79XXXXXXXXX\n"
                    "‚Ä¢ 89XXXXXXXXX\n"
                    "‚Ä¢ 9XXXXXXXXX"
                )
                return
            
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω
            if state.is_order_complete():
                await self._handle_complete_order(update, state)
                self._state_service.reset_state(user_id)
            # –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            elif old_step == DialogStep.GET_NAME and state.current_step == DialogStep.GET_PHONE:
                await update.message.reply_text(
                    f"–°–ø–∞—Å–∏–±–æ, {state.order_data.client_name}! "
                    "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "‚Ä¢ +79XXXXXXXXX\n"
                    "‚Ä¢ 89XXXXXXXXX\n"
                    "‚Ä¢ 9XXXXXXXXX"
                )
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
            elif state.current_step == DialogStep.GET_NAME:
                await update.message.reply_text(
                    "–ö–∞–∫ –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è."
                )
            # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GigaChat
            else:
                await update.message.reply_text(response)
            
        except Exception as e:
            if update.message:
                await update.message.reply_text(f"üò¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    def _update_state(self, state: DialogState, message: str, response: str) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞."""
        message_lower = message.lower()
        
        if state.current_step == DialogStep.START:
            brand = get_brand_by_keyword(message)
            if brand:
                state.order_data.phone_model = message
                state.current_step = DialogStep.SPECS_SELECTION
                print(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {message}")
        
        elif state.current_step == DialogStep.SPECS_SELECTION:
            state.order_data.specifications = message
            state.current_step = DialogStep.GET_NAME
            print(f"–£–∫–∞–∑–∞–Ω—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {message}")
        
        elif state.current_step == DialogStep.GET_NAME:
            if (2 <= len(message) <= 20 and 
                not any(char.isdigit() for char in message) and 
                not get_brand_by_keyword(message) and 
                not is_spec_related(message) and 
                message_lower not in ["–¥–∞", "–Ω–µ—Ç", "–∫–æ–Ω–µ—á–Ω–æ", "—Ö–æ—Ä–æ—à–æ", "–æ–∫"]):
                
                state.order_data.client_name = message
                state.current_step = DialogStep.GET_PHONE
                print(f"–£–∫–∞–∑–∞–Ω–æ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞: {message}")
                return
            else:
                state.last_error = "name_validation_error"
                print(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏: {message}")
                return
        
        elif state.current_step == DialogStep.GET_PHONE:
            is_valid, result = validate_russian_phone(message)
            if is_valid:
                state.order_data.client_phone = result
                state.current_step = DialogStep.CONFIRMATION
                print(f"–£–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {result}")
            else:
                state.last_error = result
                print(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {message}")
                return

    async def _handle_complete_order(self, update: Update, state: DialogState) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞."""
        if not update.message:
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            order_service = OrderService(self._chat_service)
            order_service.create_order(state.order_data)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –ª–æ–≥–æ–≤
            order_info = (
                f"\n{'=' * 20} –ù–û–í–´–ô –ó–ê–ö–ê–ó {'=' * 20}\n"
                f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"–ú–æ–¥–µ–ª—å: {state.order_data.phone_model}\n"
                f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {state.order_data.specifications}\n"
                f"–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {state.order_data.client_name}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {state.order_data.client_phone}\n"
                f"{'=' * 55}\n"
            )
            print(order_info, flush=True)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            confirmation_message = (
                f"–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä, {state.order_data.client_name}! "
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {state.order_data.phone_model} "
                f"—Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏: {state.order_data.specifications}. "
                "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
            )
            await update.message.reply_text(confirmation_message)
            
        except Exception as e:
            error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}"
            print(error_message)
            await update.message.reply_text(
                "üò¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
            )
